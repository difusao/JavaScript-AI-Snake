export default function AGWeights(model) {
    var population = [];
    var bestweigts = [0];
    var bestvalue = 0;

    /*
    model = { popTotal: 6, mutation: 0.05, gen: 30, best: 2 }
    // population.push({ id: 0, weights: [-0.7676971784484548, -0.7540083527507058, -0.08860577046221962, -0.8184415130770564, 0.41952749169644843, -0.10028628850753885, -0.33130107535799214, -0.9553241403414243, -0.5319513270762624, 0.4766856463207132, 0.5229871907374672, -0.05748223576886913, 0.502425545922808, -0.6706586901106903, 0.31261259542731645, -0.8350354216758307, -0.6599548844643546, -0.314168116709431, 0.07731818190402073, -0.46825728357152885, 0.14540585820720553, 0.9957044515753171, -0.6974274410565231, 0.7638767287693091, -0.03822547532385423, -0.41788558627308925, 0.11305230844919079, -0.8341799212968919, -0.41164283448988437, 0.8323303954647976, -0.5687569166032458, -0.5887925838135963, 0.8196430015178593, 0.31166016652575346, -0.43353056204704643, -0.06116852974175746, 0.060149601760031146, -0.7760544091466612, 0.2997756575042181, -0.1676583732504855, 0.8035867605892686, -0.1099417230691686, 0.27749424120029076, 0.22850377796007226, 0.49329149874120803, -0.8447269929879888, 0.9945414845957106, -0.22659002390830585, -0.10103871746753734, -0.07670474350157441, 0.0804735566028918, 0.3660786922324677, 0.865919301523665, -0.4418141772062967, 0.4952202055425152, -0.3968756896117127, 0.03192841100847321, 0.3506818765539488, -0.5014750741152008, 0.6391862062596085, -0.3632348183363816, -0.042632823016472976, 0.9912998284288608, 0.6400457224979017, -0.08008185523758016, 0.10562757574192672, 0.889461526542743, -0.49675649757179263, -0.2602849163921026, -0.8311540974827558, 0.5558446758351931, 0.8683033563344806, -0.7119202493972345, 0.31448111285799474, -0.8102069899168276, 0.41785026105776346, -0.9340361009565918, -0.4666016164277922, -0.2210411582957632, -0.6266519946684022, 0.07593101800398383, 0.2792203480381734, -0.1667687290968991, -0.833505663708257, -0.5248488753822715, 0.8843872180946488, 0.7813666256913288, -0.8300662031974007, -0.4224425031037278, -0.048612559293399915, 0.5715510780100139, -0.23850349933703763, 0.045247120414817044, 0.1903969020804861, 0.12000598272449858, -0.41117182713053424, 0.07537467559224442, -0.7740707713527577, 0.2828050120602068, 0.5189372251811535, -0.14778875252867474, 0.708716263815115, -0.7906597429772795, -0.3224328544220807, -0.8814792005769783, 0.643355261332295, 0.8359475642900724, 0.372447631283233, -0.3877582448117898, 0.1553476919205421, -0.24058252894827437, -0.8162691841608147, -0.799951604459018, -0.5353477818312484, 0.11179510939761705, 0.8220897578160309, 0.744087867711742, -0.519020069781122, 0.9185035445241576, -0.49083673099310854, 0.8382063805757949, 0.17536288134585964, 0.28646012542079946, 0.3445681620001677, -0.9282946571553485, -0.023350752693914067, 0.6299902541097273, -0.5146921689171617, -0.1448088849010074, 0.17699260060882693, -0.039042591286314376, -0.07971868624498146, -0.07830346078387551, 0.09667051996193043, -0.7639680136212119, -0.3997438263741011, 0.23301167710452164, -0.6407468347095535, -0.9385643676429671, 0.5484113507677129, -0.7958765366943261, -0.33582269300931333, 0.2361814538904028, 0.6761126794819345, -0.666793016632039, 0.24934491866832964, 0.47099376565101014, 0.8627047071277714, 0.2587482810271986, -0.3683659735435212, 0.6728437317944636, -0.1426663589826811, 0.10334091502861353, -0.13067899666650717, 0.913362047252384, -0.3534114868971119, -0.5996047058940581, 0.8341130123273128, -0.6597190033273943, -0.2554322201468242, -0.6198703605496103, 0.5160128305775951, -0.30403002007617097, -0.31684522665116743, 0.7123231490021205, 0.24527003171439832, -0.2038559600467269, -0.7680499784256236, -0.16697118899887897, 0.6736060689753915, -0.5360196754486131, 0.06155190871351435, 0.5530854410336201, -0.937376192599003, -0.14193185874767877, 0.9527122044361263, -0.34876807301737944, -0.3096286171184226, -0.6289643901560229, -0.6656984408243498, 0.729444705801364, -0.08128320979838666, 0.3977859263977872, 0.5914104103615148, -0.7909742858297699, -0.8756921602354475, 0.15461576626129947, 0.5542302977497711, -0.10881396461173631, 0.405472046716548, 0.1805024956636916, -0.4710303775159135, -0.7394275758780426, -0.7970782564141436, -0.9520906819861752, 0.9481534720604636, -0.3261783930819693, -0.6598719312611339, 0.7215179520865971, -0.13330373797909623, 0.9814480087556441, 0.9377921626661827, 0.15205921872682682, -0.6085425974877579, -0.3448488836064776, -0.9566928406289121, -0.10608765088738492, -0.3688168160950749, 0.25904929967399326, 0.9834265820775205, -0.3739561914319247, -0.13277297954565714, -0.2632912682052959, -0.2551645207133908, -0.016549709270997415, -0.5698041714210933, -0.03066224708712495, 0.6001323534398582, 0.2487564525416901, -0.28575777223885446, -0.8694198540845028, -0.1662358926751315, 0.4223794453961802, 0.30584108415469746, 0.28295271565196867, 0.938486810025378, 0.7424329548365969, -0.03886595724091668, 0.3178186534219338, -0.5875907173558153, 0.8192051544188388, -0.24087983628552356, -0.17096355191838075, 0.38727014758137956, -0.5448813719596814, -0.38964515370348574, 0.37828129906472263, 0.9711523074851276, -0.295675972468167, 0.08306149838749821, 0.9344330746200926, 0.5677986181442018, 0.4971519714038437, -0.6763621881700592, 0.482914964778395, -0.13342094950855587, -0.6626389100459305, 0.6250790560156894, -0.8995065764148569, -0.3332484871859305, -0.11865564315254362, 0.00839272562337845, 0.6102371809570237, 0.7865747619694021, 0.21618501944563429, 0.6721552992697859, 0.47334097438063605, 0.2173387867467822, 0.5173423043451106, 0.5853375373626446, -0.1672450580967899, -0.3943736720881348, -0.21254914640400102, 0.13452046408921436, 0.9225251711102822, -0.4165386729424867, 0.6654041796581787, 0.1673402888047435, -0.9177831907048484, -0.0030732448559449566, 0.7247141989575221, 0.5673724224611454, 0.9951793954197155, -0.7737252311375107, -0.6838369854488371, 0.4959765783956782, 0.08176043392184429, -0.06672018534065627, 0.739668640946979, -0.02796844607263882], value: 0 });

    best
    ---------
    gens:   100     100
    score:  1841    
    pop:    6       10

    */

    function getRandomFloat(min, max, length) {
        let value = [];

        for (let i = 0; i < length; i++)
            value.push(Math.random() * (max - min) + min);

        return value;
    }

    function popReorder(pop) {
        pop = pop.sort(function (a, b) {
            return b.value - a.value;
        });

        return pop;
    }

    function best(pop) {
        let pais = [];
        // let bestVal = 99999999999999;
        // let total = 0;
        // let p = 0;

        // Reorder
        pop = pop.sort(function (a, b) {
            return b.value - a.value;
        });

        if (pop[0].value > bestvalue){
            bestweigts[0] = pop[0].weights;
            bestvalue = pop[0].value;

            pais.push({ id: "p1", weights: pop[0].weights, value: pop[0].value });
        }else{
            pais.push({ id: "p1", weights: bestweigts[0], value: pop[0].value });
            pais.push({ id: "p2", weights: pop[1].weights, value: pop[1].value });
        }

        // pais.push({ id: "p1", weights: pop[0].weights, value: pop[0].value });
        // pais.push({ id: "p2", weights: pop[1].weights, value: pop[1].value });

        // for (let i in pop) {
        //     if (pop[i].value < bestVal && total < 2) {
        //         pais.push({ id: "p" + (total + 1), weights: pop[i].weights, value: pop[i].value });
        //         bestVal = pop[i].value;
        //         total++;
        //     }
        // }

        return pais;
    }

    function crossover(pais) {
        let par = 0;
        let filhos = [];
        var roleta = (Math.floor(Math.random() * (pais[0].weights.length)) + 0);
        var f1 = [];
        var f2 = [];
        var f2_0 = [];
        var x1 = 0;
        var x2 = 0;
        var v1 = 0;
        var v2 = 0;
        var sumV = 0;

        for (let i = 0; i < pais.length; i++) {
            if (par == 0) {
                f1 = pais[i].weights.slice(0, roleta);
                f2_0 = pais[i].weights.slice(roleta, pais[i].weights.length);

                x1 = "f1";
                v1 = 0;
                par = 1;
            } else {
                f1.splice(f1.length, 0, ...pais[i].weights.slice(roleta, pais[i].weights.length));
                f2 = pais[i].weights.slice(0, roleta);
                f2.splice(f1.length, 0, ...f2_0);

                x2 = "f2";
                v2 = 0;

                filhos.push({ id: x1, weights: f1, value: v1 });
                filhos.push({ id: x2, weights: f2, value: v2 });

                par = 2;
            }

            if (par == 2)
                par = 0;
        }

        return filhos;
    }

    function mutation(filhos) {
        for (let i = 0; i < filhos.length; i++) {
            var roleta = parseFloat((Math.random() * (1 - 0) + 0).toFixed(2));                              // Sorteia o valor da mutação.
            if (roleta <= model.mutation) {                                                                 // Define se haverá mutação comparanto com percentual em "model.mutation".
                var roletaGene = Math.floor(Math.random() * (filhos[i].weights.length)) + 0;                // Sorteia em qual gene sofrerá a mutação.
                filhos[i].weights[roletaGene] = (getRandomFloat(model.wmin, model.wmax, 1)[0]).toFixed(16); // Aplica a mutação no Filho gerado.
                filhos[i].id = filhos[i].id + "~";
            }
        }

        return filhos;
    }

    function popAjust(pais, filhos) {
        let population = [];
        let ajust = [];
        let popleft = 0;

        population.push(pais[0]);
        population = population.concat(filhos);
        popleft = model.popTotal - population.length;

        for (let i = 0; i < popleft; i++) {
            let roletaGene = Math.floor(Math.random() * (pais[0].weights.length)) + 0;             // Sorteia em qual gene sofrerá a mutação.
            let id = "px";
            let value = 0;
            let weights = [];

            for (let j = 0; j < pais[0].weights.length; j++) {
                if (j == roletaGene)                                                                // Gene sorteado.
                    weights.push((getRandomFloat(model.wmin, model.wmax, 1)[0]).toFixed(16));       // Aplica a mutação na população ajustada.
                else
                    weights.push(pais[0].weights[j]);                                               // Pega o melhor resultado da geração anterior.
            }

            ajust.push({ id: id, weights: weights, value: value });
        }

        population = population.concat(ajust);

        return population;
    }

    function start(pop) {
        let pais = best(pop);
        let filhos = crossover(pais);
        let mutacao = mutation(filhos);
        let population = popAjust(pais, mutacao);

        return population;
    }

    return {
        population,
        getRandomFloat,
        popReorder,
        best,
        crossover,
        mutation,
        popAjust,
        start,
    };
}